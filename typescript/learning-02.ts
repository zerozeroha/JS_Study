/** 타입 시스템
 *
 * '타입'은 자바스크립트에서 다루는 값의 형태에 대한 설명입니다.
 * 여기서 '형태'란 값에 존재하는 속성과 메서드 그리고 내장되어 있는 typeof 연산자가 설명하는 것을 의미합니다.
 * 타입 스크립트의 가장 기본적인 타입은 자바스크립트의 7가지 원시타입과 동일합니다.
 *
 * 타입 스크립트의 타입 시스템은 다음과 같이 작동합니다.
 * 1. 코드를 읽고 존재하는 모든 타입과 값을 이해한다.
 * 2. 각 값이 초기 선언에서 가질 수 있는 타입을 확인한다.
 * 3. 각 값이 추후 코드에서 어떻게 사용될 수 있는지 모든 방법을 확인한다.
 * 4. 값의 사용법이 타입과 일치하지 않으면 사용자에게 오류를 표시한다.
 *
 * 타입 스크립트의 오류 종류
 * 1. 구문 오류: 타입 스크립트가 자바스크립트로 변환되는 것을 차단한 경우
 * 2. 타입 오류: 타입 검사기에 따라 일치하지 않는 것이 감지된 경우
 *
 * 구문 오류: 타입 스크립트가 코드로 이해할 수 없는 잘못된 구문을 감지할 때 발생합니다.
 * 타입 오류: 타입 스크립트의 타입 검사기가 프로그램의 타입에서 오류를 감지했을 때 발생합니다.
 * 오류가 발생했다고 해서 타입 스크립트 구문이 자바스크립트로 변환되는 것을 차단하지는 않습니다.
 *
 * 할당 가능성
 * 타입 스크립트는 변수의 초깃값을 읽고 해당 변수가 허용되는 타입을 결정합니다.
 * 나중에 해당 변수에 새로운 값이 할당되면, 새롭게 할당된 값의 타입이 변수의 타입과 동일한지 확인합니다.
 * 타입 스크립트 변수에 동일한 타입의 다른 값이 할당될 때는 아무런 문제가 없습니다.
 * 타입 스크립트에서 함수 호출이나 변수에 값을 제공할 수 있는지 여부를 확인하는 것을 '할당 가능성'이라고 합니다.
 * 즉, 전달된 값이 예상된 타입으로 할당 가능한지 여부를 확인합니다.
 */

/** 타입 애너테이션
 * 때로는 변수에 타입 스크립트가 읽어야 할 초깃값이 없는 경우도 있답니다. 타입 스크립트는 나중에 사용할 변수의 초기 타입을 파악하려고 시도하지 않습니다.
 * 그리고 기본적으로 변수를 암묵적인 any 타입으로 간주합니다. 즉, 변수는 세상의 모든 것이 될 수 있음을 나타냅니다.
 *
 * 초기 타입을 유추할 수 없는 변수는 진화하는 any라고 부릅니다. 특정 타입을 강제하는 대신 새로운 값이 할당될 때마다 변수 타입에 대한 이해를 발전시킵니다.
 * 예시를 살펴보죠.
 */

let rocker; // 타입: any

rocker = "Joan Jett"; // 타입: string
rocker.toUpperCase(); // OK

rocker = 19.58; // 타입: number
rocker.toPrecision(); // OK

rocker.toUpperCase(); // Error: 'toUpperCase' does not exist on type 'number'

/** 타입 스크립트는 number 타입으로 진화한 변수가 toUpperCase() 메서드를 호출하는 것을 포착했습니다.
 * 그러나 변수가 string 타입에서 number 타입으로 진화된 것이 처음부터 의도된 것인지에 대한 여부는 더 일찍 알 수 없습니다.
 * 일반적으로 any 타입을 사용해 any 타입으로 진화하는 것을 허용하게 되면 타입 스크립트의 타입 검사 목적을 부분적으로 쓸모없게 만듭니다.
 * 타입 스크립트는 값이 어떤 타입인지 알고 있을 때, 가장 잘 동작합니다. any 타입을 가진 값에는 타입 스크립트의 타입 검사 기능을 잘 적용할 수 없습니다.
 * 검사를 위해 알려진 타입이 없기 때문이죠.
 *
 * 타입 스크립트는 초깃값을 할당하지 않고도 변수의 타입을 선언할 수 있는 구문인 '타입 애너테이션'을 제공합니다. 타입 애너테이션은 변수 이름 뒤에 배치되며
 * 콜론(:)과 타입 이름을 차례대로 기재합니다. 변수에 타입 애너테이션으로 정의한 타입 외의 값을 할당하면 타입 오류가 발생합니다.
 */

let singer: string;
singer = "G-Dragon";

/** 불필요한 타입 애너테이션
 * 타입 애너테이션은 타입 스크립트가 자체적으로 수집할 수 없는 정보를 타입 스크립트에 제공할 수 있답니다.
 * 타입을 즉시 유추할 수 있는 변수에도 타입 애너테이션을 사용할 수 있습니다. 하지만 타입 스크립트가 아직 알지 못하는 것을 알려주지 못합니다.
 *
 * 다음 코드에서 string 타입 애너테이션은 중복입니다. 타입 스크립트가 이미 firstName이 string 타입임을 유추할 수 있기 때문입니다.
 */

let firstName: string = "Kwon"; // 타입 시스템은 변경되지 않음
