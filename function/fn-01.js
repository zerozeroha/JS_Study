/** 함수
 * 1. 함수 선언문(Declaration)
 * 2. 함수 표현식(Expression)
 */

/** 1. 함수 선언문(Declaration) */
// function fn() {}

/** 2. 함수 표현식(Expression) */
// const fn = function () {};

/** ---------------------------------------------------------------------------------------------------- */

/** 함수 호이스팅(Hoisting)
 * 자바스크립트에서 함수 호이스팅(function hoisting)은 함수 선언이 해당 함수의 호출보다 먼저 평가되는 개념입니다.
 * 즉, 자바스크립트 엔진은 함수 선언을 코드의 실행 전에 "끌어올려서" 처리하기 때문에, 함수가 선언되기 전에 호출해도 에러가 발생하지 않습니다.
 * 따라서, 하단의 hello() 함수 호출의 코드가 함수 선언 이전에 작성되어도 작동하는 것이 바로 이 이유에서 입니다.
 *
 * 단, 함수 호이스팅 현상은 함수 선언문에서만 발생하고, 함수 표현문에서는 발생하지 않습니다.
 */

hello(); // hello, world!!함수 호출!!
// fn(); // Cannot access 'fn' before initialization
//오류는 함수가 선언되기 전에 호출되었을 때 발생하는 오류


// 함수 선언식 (Function Declaration): 함수 선언식은 호이스팅(hoisting)이 적용됩니다.
// 즉, 코드 작성 위치와 상관없이 스코프의 최상단으로 끌어올려져, 선언 전에 호출할 수 있습니다.
fn(); // 정상적으로 호출 가능

function fn() {
    console.log("Hello");
}

// 함수 표현식 (Function Expression): 함수 표현식은 변수에 할당되기 때문에, 선언된 이후에만 호출할 수 있습니다.
// 예를 들어 let, const와 함께 사용하는 경우 초기화 전에 호출하려 하면 오류가 발생합니다.
fn(); // 오류 발생: Cannot access 'fn' before initialization

const fn = function () {
    console.log("Hello");
};
// 오류 발생 원인
// 위 오류는 fn이 함수 표현식으로 정의되었기 때문에 발생합니다.(함수표현식이라서) fn을 호출하기 전에 초기화되지 않아 호출할 수 없는 상태입니다.